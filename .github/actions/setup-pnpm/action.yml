# .github/actions/setup-pnpm/action.yml
name: setup-pnpm
description: Setup pnpm + Node (pnpm first to avoid cache failures), then optionally install deps

inputs:
  node-version:
    description: Node.js version (semver or LTS alias)
    required: false
    default: '20'
  install:
    description: Run "pnpm install" after setup
    required: false
    default: 'true'
  frozen:
    description: Use "--frozen-lockfile" when installing
    required: false
    default: 'true'
  working-directory:
    description: Directory where "pnpm install" should be executed
    required: false
    default: '.'
  cache-dependency-path:
    description: Glob(s) to pnpm-lock.yaml for caching (supports globs)
    required: false
    default: '**/pnpm-lock.yaml'
  prepare:
    description: Run "pnpm run ci:prepare" after installation
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    # 1) Install pnpm FIRST so setup-node's "cache: pnpm" has a binary to call.
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        # If you pin pnpm in package.json -> "packageManager": "pnpm@x.y.z"
        # the action will use that version automatically.
        run_install: false

    # 2) Now install Node and enable pnpm cache (safe, pnpm exists now).
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: pnpm
        cache-dependency-path: ${{ inputs.cache-dependency-path }}

    # 3) Sanity: show versions + PATH visibility
    - name: Verify toolchain
      shell: bash
      run: |
        set -euxo pipefail
        echo "PATH=$PATH"
        node -v
        npm -v
        pnpm -v
        command -v pnpm
        # show where pnpm is installed
        echo "PNPM_HOME=${PNPM_HOME:-}"
        if command -v pnpm >/dev/null 2>&1; then pnpm store path || true; fi

    # 4) Optional install at repo root (or provided working-directory)
    - name: Install dependencies
      if: ${{ inputs.install == 'true' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        set -euxo pipefail
        if [[ "${{ inputs.frozen }}" == "true" ]]; then
          pnpm install --frozen-lockfile
        else
          # IMPORTANT: CI defaults to frozen; force a thaw when callers opt out.
          pnpm install --no-frozen-lockfile
        fi

    - name: Prepare workspace
      if: ${{ inputs.prepare == 'true' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        set -euxo pipefail
        pnpm run ci:prepare
