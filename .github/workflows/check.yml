name: check

on:
  push:
    branches:
      - main
    paths:
      - '**/*.l0.json'
      - '**/*.l0.yaml'
      - '**/*.l0.yml'
      - '**/*.l2.json'
      - '**/*.l2.yaml'
      - '**/*.l2.yml'
      - 'schemas/**'
      - 'tools/tf-lang-cli/**'
      - 'spec/v0.6/**'
      - 'examples/v0.6/**'
  pull_request:
    paths:
      - '**/*.l0.json'
      - '**/*.l0.yaml'
      - '**/*.l0.yml'
      - '**/*.l2.json'
      - '**/*.l2.yaml'
      - '**/*.l2.yml'
      - 'schemas/**'
      - 'tools/tf-lang-cli/**'
      - 'spec/v0.6/**'
      - 'examples/v0.6/**'
  workflow_dispatch:

jobs:
  replay:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm + Node
        uses: ./.github/actions/setup-pnpm
        with:
          install: true
          frozen: true
          prepare: true

      - name: Ensure canonical examples are up-to-date
        run: pnpm run l0:check

      - name: Exporter idempotence check
        run: pnpm run l0:export:idempotent

      - name: Validate monitor bundles
        run: pnpm run monitors:validate

      - name: Verify monitor pipeline references
        run: pnpm run monitors:refs

      - name: Verify monitor ID uniqueness
        run: pnpm run monitors:ids

      - name: Verify manifests
        run: pnpm run manifests:verify

      - name: Verify DAG invariants
        run: pnpm run l0:dag

      - name: Guard dev artifacts stay under /build
        run: |
          BAD=$(git ls-files -- ':(glob)examples/**/*.l0.dev.json' | grep -v '/build/' || true)
          if [ -n "$BAD" ]; then
            echo "Instrumented .l0.dev.json leaked outside /build:" >&2
            echo "$BAD" >&2
            exit 1
          fi

      - name: Determine base revision
        id: base
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "sha=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_OUTPUT"
          else
            echo "sha=${{ github.event.before }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Detect impacted artifacts
        id: changes
        run: |
          node scripts/ci/detect-schema-changes.mjs \
            --from "${{ steps.base.outputs.sha }}" \
            --to "${{ github.sha }}" \
            --event "${{ github.event_name }}" \
            --defaultRange "${{ github.event.before }}"

      - name: Validate L0 schemas
        if: steps.changes.outputs.l0_targets != ''
        env:
          L0_FILES: ${{ steps.changes.outputs.l0_targets }}
        run: |
          set -euo pipefail
          pnpm -w run validate:l0 $(printf '%s\n' "$L0_FILES")

      - name: Validate L2 schemas
        if: steps.changes.outputs.l2_targets != ''
        env:
          L2_FILES: ${{ steps.changes.outputs.l2_targets }}
        run: |
          set -euo pipefail
          pnpm -w run validate:l2 $(printf '%s\n' "$L2_FILES")

      - name: Replay effects summary
        if: steps.changes.outputs.l0_changed != ''
        env:
          L0_CHANGED: ${{ steps.changes.outputs.l0_changed }}
        run: |
          set -euo pipefail
          printf '%s\n' "$L0_CHANGED" | while IFS= read -r file; do
            [ -n "$file" ] || continue
            echo "::group::effects $file"
            node tools/tf-lang-cli/index.mjs effects "$file"
            echo "::endgroup::"
          done
