
name: ci

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  packages: write

jobs:
  ts:
    name: TypeScript build & test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: '20'
          install: 'true'
          frozen: 'true'
      - run: pnpm -r --filter "./packages/tf-lang-l0-ts" test

  rust:
    name: Rust build & test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - name: Install Rust
        run: |
          sudo apt-get update
          sudo apt-get install -y curl build-essential pkg-config libssl-dev
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH
      - run: $HOME/.cargo/bin/cargo build --manifest-path crates/Cargo.toml --workspace --all-targets --verbose
      - run: $HOME/.cargo/bin/cargo test --manifest-path crates/Cargo.toml --workspace --all-targets --verbose

  tf-spec:
    name: tf-spec
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: '20'
          install: 'true'
          frozen: 'true'
          # Ensure the subpackage is built before packing (if your tarball includes dist/)
      - name: Build tf-lang-l0-ts
        run: pnpm -C packages/tf-lang-l0-ts build
  
      # 1) Pack the subpackage and capture the absolute path as a step output
      - name: Pack tf-lang-l0 (subpackage)
        id: pack_l0
        shell: bash
        working-directory: packages/tf-lang-l0-ts
        run: |
          set -euo pipefail
          FILE="$(pnpm pack --silent | tail -n1)"
          [ -n "$FILE" ] || { echo "pnpm pack produced no filename" >&2; exit 1; }
          ABS="$PWD/$FILE"
          echo "tarball=$ABS" >> "$GITHUB_OUTPUT"
          echo "Packed tarball: $ABS"

        # 2) Export TF_L0_TGZ for all later steps (write ONLY NAME=value)
      - name: Export tarball path
        shell: bash
        run: printf 'TF_L0_TGZ=%s\n' '${{ steps.pack_l0.outputs.tarball }}' >> "$GITHUB_ENV"
            
      - run: ./scripts/validate-tf-spec
      - run: cp tf-spec/validation.txt tf-spec/validation-run1.txt
      - run: ./scripts/validate-tf-spec
      - run: diff tf-spec/validation-run1.txt tf-spec/validation.txt
      - uses: actions/upload-artifact@v4
        with:
          name: tf-spec
          path: tf-spec/validation.txt
      - name: Install Rust
        run: |
          sudo apt-get update
          sudo apt-get install -y curl build-essential pkg-config libssl-dev
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH
      - run: pnpm --filter "./packages/tf-lang-l0-ts" run test -- tests/spec.adapter.test.ts
      - run: pnpm --filter "./packages/tf-lang-l0-ts" run test -- tests/spec.adapter.test.ts
      - run: $HOME/.cargo/bin/cargo test --manifest-path packages/tf-lang-l0-rs/Cargo.toml spec_adapter
      - run: $HOME/.cargo/bin/cargo test --manifest-path packages/tf-lang-l0-rs/Cargo.toml spec_adapter

  oracle-core:
    name: oracle-core
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: '20'
          install: 'true'
          frozen: 'true'
      - run: pnpm -C packages/oracles-core-ts build
      - run: pnpm -C packages/oracles-core-ts test
      - run: ./scripts/oracle-core-results
      - run: cp oracle-core/results.json oracle-core/results.run1.json
      - run: ./scripts/oracle-core-results
      - run: diff oracle-core/results.run1.json oracle-core/results.json
      - uses: actions/upload-artifact@v4
        with:
          name: oracle-core
          path: |
            oracle-core/results.json
            oracle-core/results.md

  container-image:
    name: Container image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'LexLattice'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
      - name: Log in to GHCR
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push image
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5
        with:
          context: .
          file: services/claims-api-ts/Dockerfile
          push: true
          tags: |
            ghcr.io/lexlattice/tf-lang/claims-api-ts:0.2
            ghcr.io/lexlattice/tf-lang/claims-api-ts:${{ github.sha }}
