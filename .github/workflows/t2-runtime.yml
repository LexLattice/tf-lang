name: t2-runtime

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

jobs:
  tf-check-cli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: '20'
          install: 'true'
          frozen: 'true'
      - run: pnpm --filter @tf-lang/tf-check run build
      - run: pnpm --filter @tf-lang/tf-check run test
      - run: pnpm --filter @tf-lang/tf-check run artifacts
      - run: |
          sha256sum out/t2/tf-check/help.txt out/t2/tf-check/result.json > out/t2/tf-check.sha
      - run: pnpm --filter @tf-lang/tf-check run artifacts
      - run: sha256sum --check out/t2/tf-check.sha
      - name: Pack & run tf-check (bundled tarball)
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${GITHUB_WORKSPACE:-$PWD}"

          # pack tf-check (bundled dependencies included)
          pushd "$ROOT/packages/tf-check" >/dev/null
          pnpm run build
          TF_FILE="$(pnpm pack | tail -n1)"
          TF_ABS="$PWD/$TF_FILE"
          tar -tzf "$TF_FILE" | grep -q 'node_modules/@tf-lang/utils/package.json'
          tar -tzf "$TF_FILE" | grep -q 'node_modules/tf-lang-l0/package.json'
          tar -tzf "$TF_FILE" | grep -q 'package/schema/tf-spec.schema.json'
          popd >/dev/null

          # temp project (stay outside repo; no cd needed)
          TMP="$(mktemp -d)"
          npm init -y --prefix "$TMP" >/dev/null

          # install the bundled CLI tarball (registry-free)
          pnpm add --prefix "$TMP" "file:$TF_ABS"

          # run the installed bin
          pnpm --prefix "$TMP" exec tf-check --help >/dev/null

      - name: No URL.pathname in ESM helpers
        run: |
          ! git grep -n "new URL(.*import.meta.url).*\\.pathname" -- "packages/**" || \
            (echo "Use fileURLToPath(new URL(...)) then findRepoRoot(...)" && exit 1)
      - uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: tf-check
          path: |
            out/t2/tf-check/help.txt
            out/t2/tf-check/result.json

  adapter-ts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: '20'
          install: 'true'
          frozen: 'true'
      - run: pnpm --filter @tf-lang/adapter-execution-ts run build
      - run: pnpm --filter @tf-lang/adapter-execution-ts run test
      - run: pnpm --filter @tf-lang/adapter-execution-ts run fixtures
      - run: cp out/t2/adapter-ts-trace.json out/t2/adapter-ts-trace.run1.json
      - run: pnpm --filter @tf-lang/adapter-execution-ts run fixtures
      - run: diff out/t2/adapter-ts-trace.run1.json out/t2/adapter-ts-trace.json
      - uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: adapter-ts
          path: out/t2/adapter-ts-trace.json

  adapter-rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - name: Install Rust
        run: |
          sudo apt-get update
          sudo apt-get install -y curl build-essential pkg-config libssl-dev
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH
      - run: $HOME/.cargo/bin/cargo test --manifest-path crates/Cargo.toml --package tf-adapters-execution --all-targets

  mapper-trace2tags:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: '20'
          install: 'true'
          frozen: 'true'
      - run: pnpm --filter @tf-lang/trace2tags run build
      - run: pnpm --filter @tf-lang/trace2tags run test
      - run: pnpm --filter @tf-lang/trace2tags run artifacts
      - run: sha256sum out/t2/trace-tags.json > out/t2/trace-tags.sha
      - run: pnpm --filter @tf-lang/trace2tags run artifacts
      - run: sha256sum --check out/t2/trace-tags.sha
      - uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: trace-tags
          path: out/t2/trace-tags.json

  coverage-report:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: '20'
          install: 'true'
          frozen: 'true'
      - run: pnpm --filter @tf-lang/trace2tags run artifacts
      - run: pnpm --filter @tf-lang/coverage-generator run build
      - run: pnpm --filter @tf-lang/coverage-generator run test
      - run: pnpm --filter @tf-lang/coverage-generator run artifacts
      - run: |
          sha256sum out/t2/coverage.json out/t2/coverage.html > out/t2/coverage.sha
      - run: pnpm --filter @tf-lang/coverage-generator run artifacts
      - run: sha256sum --check out/t2/coverage.sha
      - uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: coverage
          path: |
            out/t2/coverage.json
            out/t2/coverage.html

  adapter-parity:
    runs-on: ubuntu-latest
    needs: [adapter-ts, adapter-rust]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: '20'
          install: 'true'
          frozen: 'true'
      - name: Install Rust
        run: |
          sudo apt-get update
          sudo apt-get install -y curl build-essential pkg-config libssl-dev
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH
      - run: pnpm --filter @tf-lang/adapter-execution-ts run build
      - run: pnpm --filter @tf-lang/adapter-execution-ts run parity
      - run: cp out/t2/adapter-parity.json out/t2/adapter-parity.run1.json
      - run: pnpm --filter @tf-lang/adapter-execution-ts run parity
      - run: diff out/t2/adapter-parity.run1.json out/t2/adapter-parity.json
      - uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: adapter-parity
          path: out/t2/adapter-parity.json
