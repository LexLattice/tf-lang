name: t2-runtime

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

jobs:
  tf-check-cli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: '20'
          install: 'true'
          frozen: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'merge_group' }}
          prepare: 'true'
      - run: pnpm --filter @tf-lang/tf-check run build
      - run: pnpm --filter @tf-lang/tf-check run test
      - run: pnpm --filter @tf-lang/tf-check run artifacts
      - run: |
          sha256sum out/t2/tf-check/help.txt out/t2/tf-check/result.json > out/t2/tf-check.sha
      - run: pnpm --filter @tf-lang/tf-check run artifacts
      - run: sha256sum --check out/t2/tf-check.sha
      - name: Pack & run tf-check (tarball)
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${GITHUB_WORKSPACE:-$PWD}"
          TAR_DIR="$(mktemp -d)"

          pack_pkg() {
            local pkg_path="$1"
            pushd "$ROOT/$pkg_path" >/dev/null
            pnpm run build >/dev/null
            local filename
            filename="$(pnpm pack --pack-destination "$TAR_DIR" | tail -n1)"
            if [[ "$filename" != /* ]]; then
              filename="$TAR_DIR/$filename"
            fi
            popd >/dev/null
            echo "$filename"
          }

          TF_TGZ="$(pack_pkg packages/tf-check)"
          UTILS_TGZ="$(pack_pkg packages/utils)"
          L0_TGZ="$(pack_pkg packages/tf-lang-l0-ts)"

          tar -tzf "$TF_TGZ" | grep -q 'package/dist/cli.js'
          tar -tzf "$TF_TGZ" | grep -q 'package/dist/index.js'
          tar -tzf "$TF_TGZ" | grep -q 'package/schema/tf-spec.schema.json'

          TMP="$(mktemp -d)"
          node -e "const [outPath, tfTgz, utilsTgz, l0Tgz] = process.argv.slice(1); const pkg = { name: 'tf-check-smoke', version: '0.0.0', private: true, type: 'module', dependencies: { '@tf-lang/tf-check': 'file:' + tfTgz }, pnpm: { overrides: { '@tf-lang/utils': 'file:' + utilsTgz, 'tf-lang-l0': 'file:' + l0Tgz } } }; require('node:fs').writeFileSync(outPath, JSON.stringify(pkg, null, 2));" \
            "$TMP/package.json" "$TF_TGZ" "$UTILS_TGZ" "$L0_TGZ"

          pnpm install --dir "$TMP"
          mkdir -p "$TMP/schema"
          cp "$TMP/node_modules/@tf-lang/tf-check/schema/tf-spec.schema.json" "$TMP/schema/tf-spec.schema.json"

          pnpm --dir "$TMP" exec tf-check --help >/dev/null

      - name: No URL.pathname in ESM helpers
        run: |
          ! git grep -n "new URL(.*import.meta.url).*\\.pathname" -- "packages/**" || \
            (echo "Use fileURLToPath(new URL(...)) then findRepoRoot(...)" && exit 1)
      - uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: tf-check
          path: |
            out/t2/tf-check/help.txt
            out/t2/tf-check/result.json

  adapter-ts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: '20'
          install: 'true'
          frozen: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'merge_group' }}
          prepare: 'true'
      - run: pnpm --filter @tf-lang/adapter-execution-ts run build
      - run: pnpm --filter @tf-lang/adapter-execution-ts run test
      - run: pnpm --filter @tf-lang/adapter-execution-ts run fixtures
      - run: cp out/t2/adapter-ts-trace.json out/t2/adapter-ts-trace.run1.json
      - run: pnpm --filter @tf-lang/adapter-execution-ts run fixtures
      - run: diff out/t2/adapter-ts-trace.run1.json out/t2/adapter-ts-trace.json
      - uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: adapter-ts
          path: out/t2/adapter-ts-trace.json

  adapter-rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - name: Install Rust
        run: |
          sudo apt-get update
          sudo apt-get install -y curl build-essential pkg-config libssl-dev
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH
      - run: $HOME/.cargo/bin/cargo test --manifest-path crates/Cargo.toml --package tf-adapters-execution --all-targets

  mapper-trace2tags:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: '20'
          install: 'true'
          frozen: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'merge_group' }}
          prepare: 'true'
      - run: pnpm --filter @tf-lang/trace2tags run build
      - run: pnpm --filter @tf-lang/trace2tags run test
      - run: pnpm --filter @tf-lang/trace2tags run artifacts
      - run: sha256sum out/t2/trace-tags.json > out/t2/trace-tags.sha
      - run: pnpm --filter @tf-lang/trace2tags run artifacts
      - run: sha256sum --check out/t2/trace-tags.sha
      - uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: trace-tags
          path: out/t2/trace-tags.json

  coverage-report:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: '20'
          install: 'true'
          frozen: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'merge_group' }}
      - run: pnpm --filter @tf-lang/trace2tags run artifacts
      - run: pnpm --filter @tf-lang/coverage-generator run build
      - run: pnpm --filter @tf-lang/coverage-generator run test
      - run: pnpm --filter @tf-lang/coverage-generator run artifacts
      - run: |
          sha256sum out/t2/coverage.json out/t2/coverage.html > out/t2/coverage.sha
      - run: pnpm --filter @tf-lang/coverage-generator run artifacts
      - run: sha256sum --check out/t2/coverage.sha
      - uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: coverage
          path: |
            out/t2/coverage.json
            out/t2/coverage.html

  adapter-parity:
    runs-on: ubuntu-latest
    needs: [adapter-ts, adapter-rust]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: '20'
          install: 'true'
          frozen: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'merge_group' }}
      - name: Install Rust
        run: |
          sudo apt-get update
          sudo apt-get install -y curl build-essential pkg-config libssl-dev
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH
      - run: pnpm --filter @tf-lang/adapter-execution-ts run build
      - run: pnpm --filter @tf-lang/adapter-execution-ts run parity
      - run: cp out/t2/adapter-parity.json out/t2/adapter-parity.run1.json
      - run: pnpm --filter @tf-lang/adapter-execution-ts run parity
      - run: diff out/t2/adapter-parity.run1.json out/t2/adapter-parity.json
      - uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: adapter-parity
          path: out/t2/adapter-parity.json
