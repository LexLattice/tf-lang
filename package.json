{
  "name": "tf-lang",
  "private": true,
  "version": "0.0.2",
  "packageManager": "pnpm@10.16.1",
  "scripts": {
    "build": "pnpm run --recursive build",
    "preinstall": "corepack enable pnpm",
    "check:fixtures": "tsx .codex/scripts/check-fixtures-json.ts",
    "audit": "node scripts/audit/run.mjs",
    "t5:build": "pnpm -w -r build",
    "t5:test": "pnpm -w -r test",
    "t5:run": "node scripts/t5-run.mjs",
    "t5:rerun": "node scripts/t5-run.mjs --force",
    "t5:clean": "node -e \"require('fs').rmSync('out/t5',{recursive:true,force:true}); console.log('cleaned out/t5')\"",
    "t5:run:obsolete": "echo 'Use node scripts/t5-run.mjs (or t5:rerun) instead' && exit 1",
    "test": "node scripts/test/run.mjs --kind product --kind infra --speed fast",
    "test:product": "node scripts/test/run.mjs --kind product",
    "test:infra": "node scripts/test/run.mjs --kind infra",
    "test:proofs": "node scripts/test/run.mjs --kind proofs",
    "test:parity": "node scripts/test/run.mjs --kind parity --allow-missing-deps",
    "test:fast": "node scripts/test/run.mjs --speed fast",
    "test:heavy": "node scripts/test/run.mjs --speed heavy --allow-missing-deps",
    "tests:list": "node scripts/test/list.mjs && cat out/0.4/tests/available.json",
    "pilot:build-run": "node scripts/pilot-build-run.mjs",
    "a0": "node packages/tf-l0-spec/scripts/build-ids.mjs && node packages/tf-l0-spec/scripts/finalize-a0.mjs",
    "a1": "node packages/tf-l0-spec/scripts/build-catalog.mjs && node packages/tf-l0-spec/scripts/derive-effects.mjs && node packages/tf-l0-spec/scripts/build-laws.mjs && node packages/tf-l0-spec/scripts/finalize-a1.mjs",
    "a1:summary": "node scripts/effects-summary.mjs",
    "a1:all": "pnpm run a1 && pnpm run a1:summary",
    "a5:lattice-report": "node scripts/lattice-report.mjs && jq . out/0.4/check/lattice-report.json",
    "a4:demo": "node scripts/types-demo.mjs && cat out/0.4/check/types-demo.json | node -e \"process.stdout.write(require('fs').readFileSync(0,'utf8'))\"",
    "proofs:emit": "node scripts/proofs-emit-all.mjs",
    "proofs:laws:axioms": "node scripts/emit-smt-laws.mjs --law idempotent:hash -o out/0.4/proofs/laws/idempotent_hash.smt2 && node scripts/emit-smt-laws.mjs --law inverse:serialize-deserialize -o out/0.4/proofs/laws/inverse_roundtrip.smt2 && node scripts/emit-smt-laws.mjs --law commute:emit-metric-with-pure -o out/0.4/proofs/laws/emit_commute.smt2",
    "proofs:laws:equiv": "node scripts/emit-smt-laws.mjs --equiv examples/flows/info_roundtrip.tf examples/flows/info_roundtrip.tf --laws idempotent:hash,inverse:serialize-deserialize -o out/0.4/proofs/laws/roundtrip_equiv.smt2",
    "proofs:coverage": "node scripts/proofs/coverage.mjs && cat out/0.4/proofs/coverage.json | jq .",
    "proofs:coverage:docs": "node scripts/proofs/coverage.mjs --docs docs/l0-proof-coverage.md",
    "proofs:emit-missing": "node scripts/proofs/emit-missing-laws.mjs",
    "tf": "node packages/tf-compose/bin/tf.mjs",
    "codegen:rs:signing": "node scripts/generate-rs-run.mjs out/0.4/ir/signing.ir.json -o out/0.4/codegen-rs/signing",
    "parity:ts-rs:signing": "node scripts/cross-parity-ts-rs.mjs --ir out/0.4/ir/signing.ir.json",
    "trace:filter": "node packages/tf-l0-tools/trace-filter.mjs",
    "traces:validate": "node scripts/validate-trace.mjs",
    "traces:sample": "node packages/tf-l0-tools/trace-summary.mjs --top=5 --pretty < tests/fixtures/trace-sample.jsonl",
    "validate:ids": "node scripts/validate-ids.mjs",
    "validate:catalog": "node scripts/validate-catalog.mjs",
    "lint:catalog": "node scripts/lint-catalog.mjs",
    "suggest:catalog": "node scripts/autofix-catalog.mjs --mode suggest",
    "autofix:catalog": "node scripts/autofix-catalog.mjs --apply",
    "determinism": "bash scripts/determinism-check.sh 'pnpm -s run a0'",
    "determinism:full": "bash scripts/full-determinism.sh \"pnpm -s run a0 && pnpm -s run a1 && node packages/tf-compose/bin/tf.mjs parse examples/flows/signing.tf -o out/0.4/ir/signing.ir.json && node packages/tf-compose/bin/tf.mjs canon examples/flows/signing.tf -o out/0.4/ir/signing.canon.json\"",
    "digest:out": "node scripts/write-digests.mjs",
    "pilot:manual": "node scripts/pilot-handwritten.mjs",
    "pilot:parity": "node scripts/pilot-parity.mjs",
    "pilot:all": "pnpm run pilot:build-run && pnpm run pilot:manual && pnpm run pilot:parity",
    "pilot:full:build": "TF_PILOT_FULL=1 node scripts/t5-build-run.mjs && TF_PILOT_FULL=1 node scripts/pilot-full-build-run.mjs",
    "pilot:full:parity": "node scripts/pilot-full-parity.mjs",
    "pilot:full:all": "pnpm -w -r build && pnpm run pilot:full:build && pnpm run pilot:full:parity",
    "graph:signing": "node scripts/graph-ir.mjs out/0.4/ir/signing.ir.json out/0.4/graphs/signing.dot",
    "contracts:baseline:capture": "node scripts/baseline-capture.mjs",
    "contracts:check-breaking": "node scripts/check-breaking.mjs",
    "policy:auth": "node packages/tf-compose/bin/tf-policy-auth.mjs",
    "policy:auth:samples": "node -e \"(async()=>{const {spawnSync}=require('node:child_process');const runs=[['ok','examples/flows/auth_ok.tf'],['wrong','examples/flows/auth_wrong_scope.tf'],['missing','examples/flows/auth_missing.tf']];for(const [label,file] of runs){const r=spawnSync('node',['packages/tf-compose/bin/tf-policy-auth.mjs','--','check',file],{stdio:'inherit'}); if(r.status!==0) console.error(`[auth smoke] ${label} -> nonzero (expected for wrong/missing)`);} process.exit(0)})();\"",
    "docs:gen": "node scripts/docgen/catalog.mjs && node scripts/docgen/dsl.mjs && node scripts/docgen/effects.mjs",
    "docs:check": "node scripts/docgen/check.mjs"
  },
  "devDependencies": {
    "typescript": "5.9.2",
    "ajv": "^8.17.1",
    "yaml": "^2.4.5",
    "@tf-lang/tf-plan": "workspace:*",
    "@tf-lang/tf-plan-scaffold": "workspace:*",
    "@tf-lang/tf-plan-compare": "workspace:*"
  },
  "pnpm": {
    "onlyBuiltDependencies": [
      "esbuild"
    ],
    "overrides": {
      "esbuild": "0.25.0"
    }
  }
}
