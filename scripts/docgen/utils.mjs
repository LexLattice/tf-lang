#!/usr/bin/env node
import { createHash } from 'node:crypto';
import { mkdir, writeFile } from 'node:fs/promises';
import path from 'node:path';

import { canonicalize } from '../hash-jsonl.mjs';

export function getFixtureSeed() {
  const raw = process.env.DOCGEN_FIXTURE_SEED ?? '42';
  const parsed = Number.parseInt(raw, 10);
  if (Number.isNaN(parsed)) {
    throw new Error(`DOCGEN_FIXTURE_SEED must be an integer, received ${raw}`);
  }
  return parsed;
}

export function resolveRepoRoot(currentDir, explicitRoot) {
  if (explicitRoot) {
    return explicitRoot;
  }
  return path.resolve(currentDir, '..', '..');
}

export function canonicalData(value) {
  return canonicalize(value);
}

export function finalizeDoc(scriptPath, lines) {
  const body = lines.join('\n').replace(/\s+$/u, '').concat('\n');
  const digest = createHash('sha256').update(body).digest('hex');
  const banner = `<!-- generated by ${scriptPath}; do not edit by hand; sha256:${digest} -->`;
  return `${banner}\n${body}`;
}

export async function writeDoc(outPath, scriptPath, lines) {
  const output = finalizeDoc(scriptPath, lines);
  await mkdir(path.dirname(outPath), { recursive: true });
  await writeFile(outPath, output, 'utf8');
  return outPath;
}
