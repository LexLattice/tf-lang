id: A1-LSP-Proto
version: 0.45.1

# ---------- Paths ----------
scope:
  allow_paths:
    - "packages/tf-lsp-server/**"
    - "samples/a1/**"
    - "tools/tf-lsp-sample/**" # small helpers (catalog loader, etc.)
  forbid_paths:
    - "pnpm-lock.yaml"
    - "pnpm-workspace.yaml"
    - "package.json"
    - "crates/**"
    - "**/*.generated.*"
    - "dist/**"

# ---------- Phases ----------
phases:

  cp1_baseline:
    title: "Minimal server boots & local CLI smoke"
    rules:
      - scope_guard
      - scaffold_exists
      - compile_ok_scoped
      - smoke_server_stdio
      - smoke_tf_cli

  cp2_diag:
    title: "Diagnostics: parse|check|canon + protected policy"
    inherits: [cp1_baseline]
    rules:
      - diag_ranges
      - parser_error_surface
      - diag_protected_policy
      - banned_tokens_soft

  cp3_hover:
    title: "Hover: signature + effects + laws"
    inherits: [cp2_diag]
    rules:
      - hover_signatures

  cp4_code_actions:
    title: "CodeAction: Wrap with Authorize{scope=?} + hygiene (hard)"
    inherits: [cp3_hover]
    rules:
      - code_action_authorize
      - banned_tokens_hard

# ---------- Rules ----------
rules:

  # ============ CP1 ============
  scope_guard:
    kind: diff_scan
    cmd: cat "$DIFF_PATH" | node tools/tf-checker/scan-diff.mjs --config meta/checker.yml --diff -
    expect:
      ok: true   # rejects edits outside allow_paths

  scaffold_exists:
    kind: fs
    files:
      - "packages/tf-lsp-server/package.json"
      - "packages/tf-lsp-server/tsconfig.json"
      - "packages/tf-lsp-server/src/server.ts"
      - "packages/tf-lsp-server/bin/server.mjs"
      - "samples/a1/illegal_write.tf"
      - "tools/tf-lsp-sample/catalog-loader.mjs"

  # **Scoped build only** â€” avoid workspace recursion and drop `--silent`
  compile_ok_scoped:
    kind: cmd
    cmd: >
      pnpm -C packages/tf-lsp-server i &&
      pnpm -C packages/tf-lsp-server build
    expect:
      code: 0

  smoke_server_stdio:
    kind: cmd
    cmd: node packages/tf-lsp-server/bin/server.mjs --stdio >/dev/null
    expect:
      code: 0

  smoke_tf_cli:
    kind: cmd
    cmd: node packages/tf-compose/bin/tf.mjs parse samples/a1/illegal_write.tf -o out/0.45/a1/parse.json
    expect:
      code: 0

  # ============ CP2 ============
  diag_ranges:
    kind: cmd
    cmd: node tools/tf-lsp-sample/diag-check.mjs --file samples/a1/illegal_write.tf
    expect:
      code: 0
      contains: "diagnostics_ok:true"   # tool prints a compact verdict line

  parser_error_surface:
    kind: cmd
    cmd: node tools/tf-lsp-sample/diag-check.mjs --file samples/a1/syntax_error.tf
    expect:
      code: 0
      contains: "syntax_surface_ok:true"

  diag_protected_policy:
    kind: cmd
    cmd: node tools/tf-lsp-sample/diag-check.mjs --file samples/a1/protected_write.tf
    expect:
      code: 1
      contains: "Protected op 'write-object' must be inside Authorize{}"

  # **Token rule, deterministic**: assert the scan JSON includes empty violations (string match)
  banned_tokens_soft:
    kind: diff_scan
    cmd: cat "$DIFF_PATH" | node tools/tf-checker/scan-diff.mjs --config meta/checker.yml --diff -
    expect:
      ok: true
      contains: "\"token_violations\": []"

  # ============ CP3 ============
  hover_signatures:
    kind: cmd
    cmd: node tools/tf-lsp-sample/hover-check.mjs --symbol "tf:network/publish@1"
    expect:
      code: 0
      contains: "effects:[\"Network.Out\"]"

  # ============ CP4 ============
  code_action_authorize:
    kind: cmd
    cmd: node tools/tf-lsp-sample/code-action-check.mjs --file samples/a1/protected_write.tf
    expect:
      code: 0
      contains: "inserted:Authorize"
  
  banned_tokens_hard:
    kind: diff_scan
    cmd: cat "$DIFF_PATH" | node tools/tf-checker/scan-diff.mjs --config meta/checker.yml --diff -
    expect:
      ok: true
      contains: "\"token_violations\": []"
